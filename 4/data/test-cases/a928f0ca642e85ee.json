{"uid":"a928f0ca642e85ee","name":"Can get employees by their company id","fullName":"com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId","historyId":"de3ee291b29acbfca090a13c7a0a1094","time":{"start":1744043651292,"stop":1744043656316,"duration":5024},"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=null, url=null, phone=79991436631, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=null, url=null, phone=79991436631, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=null, url=null, phone=79991436631, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=null, url=null, phone=79991436631, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=421, firstName=Evon, lastName=Dach, middleName=Harley, companyId=741, email=shane.kulas@gmail.com, url=www.dorine-mertz.io, phone=79991436631, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","steps":[{"name":"Insert new company Glover Inc data in DB","time":{"start":1744043651631,"stop":1744043653725,"duration":2094},"status":"passed","steps":[],"attachments":[{"uid":"1730b135cc258257","name":"INSERT query to: x_clients_db_eefj","source":"1730b135cc258257.html","type":"text/html","size":790}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Insert new user 123kadehar123 data in DB","time":{"start":1744043653765,"stop":1744043654004,"duration":239},"status":"passed","steps":[],"attachments":[{"uid":"afb21df360d8b276","name":"INSERT query to: x_clients_db_eefj","source":"afb21df360d8b276.html","type":"text/html","size":857}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Get auth token for user 123kadehar123","time":{"start":1744043654010,"stop":1744043654871,"duration":861},"status":"passed","steps":[],"attachments":[{"uid":"aaf9b189426ec4b7","name":"Request","source":"aaf9b189426ec4b7.html","type":"text/html","size":1542},{"uid":"6de8f6429cb4c958","name":"Response","source":"6de8f6429cb4c958.html","type":"text/html","size":2760}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create new employee with name Evon","time":{"start":1744043654911,"stop":1744043655142,"duration":231},"status":"passed","steps":[],"attachments":[{"uid":"b1bf23dcfa14e2f3","name":"Request","source":"b1bf23dcfa14e2f3.html","type":"text/html","size":1882},{"uid":"a18f6e05b4ab99a7","name":"Response","source":"a18f6e05b4ab99a7.html","type":"text/html","size":2532}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Find all employees by company ID","time":{"start":1744043655144,"stop":1744043655398,"duration":254},"status":"passed","steps":[],"attachments":[{"uid":"60512d7f70628329","name":"Request","source":"60512d7f70628329.html","type":"text/html","size":1370},{"uid":"fdd5c76d9a3fe5d4","name":"Response","source":"fdd5c76d9a3fe5d4.html","type":"text/html","size":2815}],"parameters":[{"name":"companyId","value":"741"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Delete employee by its ID","time":{"start":1744043655591,"stop":1744043655829,"duration":238},"status":"passed","steps":[],"attachments":[{"uid":"7fcdd87e1ad2a6d9","name":"DELETE query to: x_clients_db_eefj","source":"7fcdd87e1ad2a6d9.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"421"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete user by its ID","time":{"start":1744043655830,"stop":1744043656070,"duration":240},"status":"passed","steps":[],"attachments":[{"uid":"9c2c438af4b64526","name":"DELETE query to: x_clients_db_eefj","source":"9c2c438af4b64526.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"79"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete company by its ID","time":{"start":1744043656071,"stop":1744043656303,"duration":232},"status":"passed","steps":[],"attachments":[{"uid":"b6d5235f1f6c4cf0","name":"DELETE query to: x_clients_db_eefj","source":"b6d5235f1f6c4cf0.html","type":"text/html","size":694}],"parameters":[{"name":"id","value":"741"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":11,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"api"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.github.kadehar.inno.tests.SampleTests]/[method:canGetEmployeesByCompanyId(com.github.kadehar.inno.model.rest.EmployeeJson)]"},{"name":"host","value":"fv-az1368-128"},{"name":"thread","value":"2456@fv-az1368-128.ForkJoinPool-1-worker-3(28)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testClass","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testMethod","value":"canGetEmployeesByCompanyId"},{"name":"suite","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["api"]},"source":"a928f0ca642e85ee.json","parameterValues":[]}