{"uid":"f1ced211c1887720","name":"Can get employees by their company id","fullName":"com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId","historyId":"de3ee291b29acbfca090a13c7a0a1094","time":{"start":1744044681195,"stop":1744044687257,"duration":6062},"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=null, url=null, phone=79992711419, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=null, url=null, phone=79992711419, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=null, url=null, phone=79992711419, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=null, url=null, phone=79992711419, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=425, firstName=Barbera, lastName=Wunsch, middleName=Lavada, companyId=745, email=stacey.hilll@gmail.com, url=www.nicky-terry.biz, phone=79992711419, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","steps":[{"name":"Insert new company Dooley, Mosciski and Senger data in DB","time":{"start":1744044681545,"stop":1744044683852,"duration":2307},"status":"passed","steps":[],"attachments":[{"uid":"141b86ab20135c9c","name":"INSERT query to: x_clients_db_eefj","source":"141b86ab20135c9c.html","type":"text/html","size":810}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Insert new user 123kadehar123 data in DB","time":{"start":1744044683889,"stop":1744044684122,"duration":233},"status":"passed","steps":[],"attachments":[{"uid":"d938f551d01fd466","name":"INSERT query to: x_clients_db_eefj","source":"d938f551d01fd466.html","type":"text/html","size":855}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Get auth token for user 123kadehar123","time":{"start":1744044684128,"stop":1744044685858,"duration":1730},"status":"passed","steps":[],"attachments":[{"uid":"9651617004b418fb","name":"Request","source":"9651617004b418fb.html","type":"text/html","size":1542},{"uid":"d77d01765ef730b8","name":"Response","source":"d77d01765ef730b8.html","type":"text/html","size":2758}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create new employee with name Barbera","time":{"start":1744044685898,"stop":1744044686134,"duration":236},"status":"passed","steps":[],"attachments":[{"uid":"290d34c36c3e9a04","name":"Request","source":"290d34c36c3e9a04.html","type":"text/html","size":1894},{"uid":"532e1cf3c4e12de3","name":"Response","source":"532e1cf3c4e12de3.html","type":"text/html","size":2532}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Find all employees by company ID","time":{"start":1744044686136,"stop":1744044686363,"duration":227},"status":"passed","steps":[],"attachments":[{"uid":"9346c88629251802","name":"Request","source":"9346c88629251802.html","type":"text/html","size":1370},{"uid":"6c837328f7eb7ac","name":"Response","source":"6c837328f7eb7ac.html","type":"text/html","size":2820}],"parameters":[{"name":"companyId","value":"745"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Delete employee by its ID","time":{"start":1744044686563,"stop":1744044686791,"duration":228},"status":"passed","steps":[],"attachments":[{"uid":"131434afc719c1a5","name":"DELETE query to: x_clients_db_eefj","source":"131434afc719c1a5.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"425"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete user by its ID","time":{"start":1744044686792,"stop":1744044687019,"duration":227},"status":"passed","steps":[],"attachments":[{"uid":"3df092644d4a1bcc","name":"DELETE query to: x_clients_db_eefj","source":"3df092644d4a1bcc.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"83"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete company by its ID","time":{"start":1744044687019,"stop":1744044687245,"duration":226},"status":"passed","steps":[],"attachments":[{"uid":"c1a616334a2ec7b2","name":"DELETE query to: x_clients_db_eefj","source":"c1a616334a2ec7b2.html","type":"text/html","size":694}],"parameters":[{"name":"id","value":"745"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":11,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"api"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.github.kadehar.inno.tests.SampleTests]/[method:canGetEmployeesByCompanyId(com.github.kadehar.inno.model.rest.EmployeeJson)]"},{"name":"host","value":"fv-az1049-469"},{"name":"thread","value":"2467@fv-az1049-469.ForkJoinPool-1-worker-1(26)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testClass","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testMethod","value":"canGetEmployeesByCompanyId"},{"name":"suite","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"1668f6e84400b4bb","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/8//#testresult/1668f6e84400b4bb","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=null, url=null, phone=79993547004, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\n","time":{"start":1744044556017,"stop":1744044561357,"duration":5340}},{"uid":"a7462791e83a1c4d","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/7//#testresult/a7462791e83a1c4d","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=null, url=null, phone=79990056459, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=elmer.thompson@hotmail.com, url=www.kraig-haley.io, phone=79990056459, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=elmer.thompson@hotmail.com, url=www.kraig-haley.io, phone=79990056459, birthDate=1995-04-07, active=true)]\n","time":{"start":1744044092364,"stop":1744044099576,"duration":7212}},{"uid":"ebff87da974d04e3","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/6//#testresult/ebff87da974d04e3","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=null, url=null, phone=79993451582, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=francis.kilback@gmail.com, url=www.adam-block.info, phone=79993451582, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=francis.kilback@gmail.com, url=www.adam-block.info, phone=79993451582, birthDate=1995-04-07, active=true)]\n","time":{"start":1744043957125,"stop":1744043963376,"duration":6251}}]},"tags":["api"]},"source":"f1ced211c1887720.json","parameterValues":[]}