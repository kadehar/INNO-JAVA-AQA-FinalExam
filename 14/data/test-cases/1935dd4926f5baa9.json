{"uid":"1935dd4926f5baa9","name":"Can get employees by their company id","fullName":"com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId","historyId":"de3ee291b29acbfca090a13c7a0a1094","time":{"start":1744046580901,"stop":1744046585546,"duration":4645},"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=null, url=null, phone=79999279312, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=null, url=null, phone=79999279312, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=null, url=null, phone=79999279312, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=null, url=null, phone=79999279312, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=428, firstName=Wilbert, lastName=Jones, middleName=Juliann, companyId=748, email=brooks.bergnaum@hotmail.com, url=www.meredith-schneider.com, phone=79999279312, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","steps":[{"name":"Insert new company Kozey Group data in DB","time":{"start":1744046581228,"stop":1744046583059,"duration":1831},"status":"passed","steps":[],"attachments":[{"uid":"2ce85fc306bb5fa0","name":"INSERT query to: x_clients_db_eefj","source":"2ce85fc306bb5fa0.html","type":"text/html","size":794}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Insert new user 123kadehar123 data in DB","time":{"start":1744046583097,"stop":1744046583291,"duration":194},"status":"passed","steps":[],"attachments":[{"uid":"e064b4e1d242faad","name":"INSERT query to: x_clients_db_eefj","source":"e064b4e1d242faad.html","type":"text/html","size":857}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Get auth token for user 123kadehar123","time":{"start":1744046583296,"stop":1744046584307,"duration":1011},"status":"passed","steps":[],"attachments":[{"uid":"6ab7afdabb78d47","name":"Request","source":"6ab7afdabb78d47.html","type":"text/html","size":1542},{"uid":"b60ebdf87e59fac7","name":"Response","source":"b60ebdf87e59fac7.html","type":"text/html","size":2760}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create new employee with name Wilbert","time":{"start":1744046584337,"stop":1744046584553,"duration":216},"status":"passed","steps":[],"attachments":[{"uid":"50d32448ac783ed4","name":"Request","source":"50d32448ac783ed4.html","type":"text/html","size":1918},{"uid":"3e273b988f6d8d98","name":"Response","source":"3e273b988f6d8d98.html","type":"text/html","size":2532}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Find all employees by company ID","time":{"start":1744046584555,"stop":1744046584768,"duration":213},"status":"passed","steps":[],"attachments":[{"uid":"7a7941923d83fe5c","name":"Request","source":"7a7941923d83fe5c.html","type":"text/html","size":1370},{"uid":"7565f430c14d7636","name":"Response","source":"7565f430c14d7636.html","type":"text/html","size":2827}],"parameters":[{"name":"companyId","value":"748"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Delete employee by its ID","time":{"start":1744046584968,"stop":1744046585159,"duration":191},"status":"passed","steps":[],"attachments":[{"uid":"88e17bdf3f94779c","name":"DELETE query to: x_clients_db_eefj","source":"88e17bdf3f94779c.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"428"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete user by its ID","time":{"start":1744046585160,"stop":1744046585346,"duration":186},"status":"passed","steps":[],"attachments":[{"uid":"e9356191d609c0ad","name":"DELETE query to: x_clients_db_eefj","source":"e9356191d609c0ad.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"86"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete company by its ID","time":{"start":1744046585346,"stop":1744046585534,"duration":188},"status":"passed","steps":[],"attachments":[{"uid":"bf340066ce97ea2a","name":"DELETE query to: x_clients_db_eefj","source":"bf340066ce97ea2a.html","type":"text/html","size":694}],"parameters":[{"name":"id","value":"748"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":11,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"api"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.github.kadehar.inno.tests.SampleTests]/[method:canGetEmployeesByCompanyId(com.github.kadehar.inno.model.rest.EmployeeJson)]"},{"name":"host","value":"fv-az1361-807"},{"name":"thread","value":"2436@fv-az1361-807.ForkJoinPool-1-worker-1(26)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testClass","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testMethod","value":"canGetEmployeesByCompanyId"},{"name":"suite","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"9da59ef31f24b2db","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/13//#testresult/9da59ef31f24b2db","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=null, url=null, phone=79992729243, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\n","time":{"start":1744046316883,"stop":1744046322131,"duration":5248}},{"uid":"4f927bfbf5f42279","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/12//#testresult/4f927bfbf5f42279","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=null, url=null, phone=79999760307, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=wendell.ritchie@hotmail.com, url=www.layla-gerlach.name, phone=79999760307, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=wendell.ritchie@hotmail.com, url=www.layla-gerlach.name, phone=79999760307, birthDate=1995-04-07, active=true)]\n","time":{"start":1744046182352,"stop":1744046188197,"duration":5845}}]},"tags":["api"]},"source":"1935dd4926f5baa9.json","parameterValues":[]}