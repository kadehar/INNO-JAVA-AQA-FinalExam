{"uid":"9da59ef31f24b2db","name":"Can get employees by their company id","fullName":"com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId","historyId":"de3ee291b29acbfca090a13c7a0a1094","time":{"start":1744046316883,"stop":1744046322131,"duration":5248},"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=null, url=null, phone=79992729243, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=null, url=null, phone=79992729243, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=null, url=null, phone=79992729243, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=null, url=null, phone=79992729243, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=427, firstName=Shiloh, lastName=Ryan, middleName=Willena, companyId=747, email=denese.quigley@gmail.com, url=www.tresa-fadel.io, phone=79992729243, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","steps":[{"name":"Insert new company Bechtelar LLC data in DB","time":{"start":1744046317132,"stop":1744046319393,"duration":2261},"status":"passed","steps":[],"attachments":[{"uid":"71911108371b4a3e","name":"INSERT query to: x_clients_db_eefj","source":"71911108371b4a3e.html","type":"text/html","size":788}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Insert new user 123kadehar123 data in DB","time":{"start":1744046319430,"stop":1744046319669,"duration":239},"status":"passed","steps":[],"attachments":[{"uid":"48f0dbc99bb0ded3","name":"INSERT query to: x_clients_db_eefj","source":"48f0dbc99bb0ded3.html","type":"text/html","size":854}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Get auth token for user 123kadehar123","time":{"start":1744046319674,"stop":1744046320754,"duration":1080},"status":"passed","steps":[],"attachments":[{"uid":"d25abce947a716e4","name":"Request","source":"d25abce947a716e4.html","type":"text/html","size":1542},{"uid":"a08a8efcaea5d656","name":"Response","source":"a08a8efcaea5d656.html","type":"text/html","size":2757}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create new employee with name Shiloh","time":{"start":1744046320796,"stop":1744046321023,"duration":227},"status":"passed","steps":[],"attachments":[{"uid":"62ea117af44dbb40","name":"Request","source":"62ea117af44dbb40.html","type":"text/html","size":1892},{"uid":"e299b3bf93c533b0","name":"Response","source":"e299b3bf93c533b0.html","type":"text/html","size":2532}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Find all employees by company ID","time":{"start":1744046321033,"stop":1744046321253,"duration":220},"status":"passed","steps":[],"attachments":[{"uid":"fdf2cb6c5ffcd3c6","name":"Request","source":"fdf2cb6c5ffcd3c6.html","type":"text/html","size":1370},{"uid":"e6544b54aa9b852d","name":"Response","source":"e6544b54aa9b852d.html","type":"text/html","size":2817}],"parameters":[{"name":"companyId","value":"747"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Delete employee by its ID","time":{"start":1744046321417,"stop":1744046321651,"duration":234},"status":"passed","steps":[],"attachments":[{"uid":"2375e6e66ac427fe","name":"DELETE query to: x_clients_db_eefj","source":"2375e6e66ac427fe.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"427"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete user by its ID","time":{"start":1744046321652,"stop":1744046321884,"duration":232},"status":"passed","steps":[],"attachments":[{"uid":"842180e1a11b9d22","name":"DELETE query to: x_clients_db_eefj","source":"842180e1a11b9d22.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"85"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete company by its ID","time":{"start":1744046321885,"stop":1744046322118,"duration":233},"status":"passed","steps":[],"attachments":[{"uid":"5fd789398210d569","name":"DELETE query to: x_clients_db_eefj","source":"5fd789398210d569.html","type":"text/html","size":694}],"parameters":[{"name":"id","value":"747"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":11,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"api"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.github.kadehar.inno.tests.SampleTests]/[method:canGetEmployeesByCompanyId(com.github.kadehar.inno.model.rest.EmployeeJson)]"},{"name":"host","value":"fv-az1671-830"},{"name":"thread","value":"2561@fv-az1671-830.ForkJoinPool-1-worker-1(26)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testClass","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testMethod","value":"canGetEmployeesByCompanyId"},{"name":"suite","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"4f927bfbf5f42279","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/12//#testresult/4f927bfbf5f42279","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=null, url=null, phone=79999760307, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=wendell.ritchie@hotmail.com, url=www.layla-gerlach.name, phone=79999760307, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=426, firstName=Tyrone, lastName=Flatley, middleName=Robbie, companyId=746, email=wendell.ritchie@hotmail.com, url=www.layla-gerlach.name, phone=79999760307, birthDate=1995-04-07, active=true)]\n","time":{"start":1744046182352,"stop":1744046188197,"duration":5845}}]},"tags":["api"]},"source":"9da59ef31f24b2db.json","parameterValues":[]}