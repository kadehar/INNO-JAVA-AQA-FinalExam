{"uid":"1668f6e84400b4bb","name":"Can get employees by their company id","fullName":"com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId","historyId":"de3ee291b29acbfca090a13c7a0a1094","time":{"start":1744044556017,"stop":1744044561357,"duration":5340},"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=null, url=null, phone=79993547004, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=null, url=null, phone=79993547004, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nExpecting ArrayList:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=null, url=null, phone=79993547004, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\n","statusTrace":"java.lang.AssertionError: \nExpecting ArrayList:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=null, url=null, phone=79993547004, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=424, firstName=Darron, lastName=O'Kon, middleName=Ema, companyId=744, email=vicente.gerlach@yahoo.com, url=www.edison-spinka.net, phone=79993547004, birthDate=1995-04-07, active=true)]\n\n\tat com.github.kadehar.inno.tests.SampleTests.canGetEmployeesByCompanyId(SampleTests.java:60)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1501)\n\tat java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2274)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:495)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:662)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:507)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1460)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:2036)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:189)\n","steps":[{"name":"Insert new company Daugherty, Jacobi and Nader data in DB","time":{"start":1744044556364,"stop":1744044558435,"duration":2071},"status":"passed","steps":[],"attachments":[{"uid":"8d772c316a36acba","name":"INSERT query to: x_clients_db_eefj","source":"8d772c316a36acba.html","type":"text/html","size":822}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Insert new user 123kadehar123 data in DB","time":{"start":1744044558463,"stop":1744044558664,"duration":201},"status":"passed","steps":[],"attachments":[{"uid":"6db55c6f152cd5d9","name":"INSERT query to: x_clients_db_eefj","source":"6db55c6f152cd5d9.html","type":"text/html","size":854}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Get auth token for user 123kadehar123","time":{"start":1744044558670,"stop":1744044559915,"duration":1245},"status":"passed","steps":[],"attachments":[{"uid":"972ae07f9e30c510","name":"Request","source":"972ae07f9e30c510.html","type":"text/html","size":1542},{"uid":"7b08baf84bf68eae","name":"Response","source":"7b08baf84bf68eae.html","type":"text/html","size":2757}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create new employee with name Darron","time":{"start":1744044559946,"stop":1744044560347,"duration":401},"status":"passed","steps":[],"attachments":[{"uid":"6c3fc5d7c53f010","name":"Request","source":"6c3fc5d7c53f010.html","type":"text/html","size":1904},{"uid":"257c74d7d8af2c5e","name":"Response","source":"257c74d7d8af2c5e.html","type":"text/html","size":2532}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Find all employees by company ID","time":{"start":1744044560349,"stop":1744044560579,"duration":230},"status":"passed","steps":[],"attachments":[{"uid":"135365cf80945743","name":"Request","source":"135365cf80945743.html","type":"text/html","size":1370},{"uid":"38eae85fba413fd7","name":"Response","source":"38eae85fba413fd7.html","type":"text/html","size":2817}],"parameters":[{"name":"companyId","value":"744"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Delete employee by its ID","time":{"start":1744044560745,"stop":1744044560949,"duration":204},"status":"passed","steps":[],"attachments":[{"uid":"70505aef6e2c8372","name":"DELETE query to: x_clients_db_eefj","source":"70505aef6e2c8372.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"424"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete user by its ID","time":{"start":1744044560949,"stop":1744044561145,"duration":196},"status":"passed","steps":[],"attachments":[{"uid":"67b71c63a5ee84f4","name":"DELETE query to: x_clients_db_eefj","source":"67b71c63a5ee84f4.html","type":"text/html","size":695}],"parameters":[{"name":"id","value":"82"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Delete company by its ID","time":{"start":1744044561145,"stop":1744044561343,"duration":198},"status":"passed","steps":[],"attachments":[{"uid":"9567a39a0311b7aa","name":"DELETE query to: x_clients_db_eefj","source":"9567a39a0311b7aa.html","type":"text/html","size":694}],"parameters":[{"name":"id","value":"744"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":11,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"api"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.github.kadehar.inno.tests.SampleTests]/[method:canGetEmployeesByCompanyId(com.github.kadehar.inno.model.rest.EmployeeJson)]"},{"name":"host","value":"fv-az1784-745"},{"name":"thread","value":"2487@fv-az1784-745.ForkJoinPool-1-worker-1(26)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testClass","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"testMethod","value":"canGetEmployeesByCompanyId"},{"name":"suite","value":"com.github.kadehar.inno.tests.SampleTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"a7462791e83a1c4d","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/7//#testresult/a7462791e83a1c4d","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=null, url=null, phone=79990056459, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=elmer.thompson@hotmail.com, url=www.kraig-haley.io, phone=79990056459, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=423, firstName=Mervin, lastName=Kassulke, middleName=Vickey, companyId=743, email=elmer.thompson@hotmail.com, url=www.kraig-haley.io, phone=79990056459, birthDate=1995-04-07, active=true)]\n","time":{"start":1744044092364,"stop":1744044099576,"duration":7212}},{"uid":"ebff87da974d04e3","reportUrl":"https://kadehar.github.io/INNO-JAVA-AQA-FinalExam/6//#testresult/ebff87da974d04e3","status":"failed","statusDetails":"\nExpecting ArrayList:\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=null, url=null, phone=79993451582, birthDate=1995-04-07, active=true)]\nto contain:\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=francis.kilback@gmail.com, url=www.adam-block.info, phone=79993451582, birthDate=1995-04-07, active=true)]\nbut could not find the following element(s):\n  [EmployeeJson(id=422, firstName=Shana, lastName=Klocko, middleName=Chae, companyId=742, email=francis.kilback@gmail.com, url=www.adam-block.info, phone=79993451582, birthDate=1995-04-07, active=true)]\n","time":{"start":1744043957125,"stop":1744043963376,"duration":6251}}]},"tags":["api"]},"source":"1668f6e84400b4bb.json","parameterValues":[]}